#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var parseArgs = _interopDefault(require('minimist'));
var inquirer = _interopDefault(require('inquirer'));
var Configstore = _interopDefault(require('configstore'));
var fs = _interopDefault(require('fs-extra'));
var chalk$1 = _interopDefault(require('chalk'));
var msee = _interopDefault(require('msee'));
var path = _interopDefault(require('path'));
var fs$1 = _interopDefault(require('fs'));

var CONFIG = {
  CLI_PARAMS: {
    v: 'version',
    version: 'version',
    help: 'help',
    a: 'add',
    add: 'add',
    config: 'config',
  },
  DEFAULT_CLI: 'help',
  COMMANDS: [
    'help',
    'version',
    'add',
    'config',
  ]
};

const CONFIG$1 = new Configstore('CORSPROXY');

function add () {
  inquirer.prompt([

  ]).then((answers) => {

  });
}

const CONFIG$2 = new Configstore('WORKTERRCLI');

function config () {
  console.log(chalk$1.blue('path: ' + CONFIG$2.path));

  console.log(JSON.stringify(fs.readJSONSync(CONFIG$2.path), null, 2));

}

function help (args) {
  let cmd = 'help';

  const file = path.join(__dirname, '../doc', `${cmd}.md`);
  let doc;

  if (fs$1.existsSync(file)) {
    doc = msee.parseFile(file);
    console.log(doc);
  } else {
    console.log('oh! I can\'t help you');
  }
}

var version = "0.0.1";

function V () {

  console.log(`version: ${version}`);
}

const figlet = require('figlet');
const chalk = require('chalk');

function getHost (argv) {
  if (argv.h || argv.host) {
    return argv.h || argv.host
  }

  const argvs = argv._;
  const len = argvs.length;
  
  for(let i = 0; i < len; i++) {
    if (/^https?:\/\/[\w\.\/-]+/.test(argvs[i])) {
      return argvs[i]
    }
  }
  return ''
  
}

const express = require('express');
const cors = require('cors');
const proxy = require('http-proxy-middleware');

function startProxy (argv) {

  const host = getHost(argv);

  
  const app = express();
  // 添加跨域请求头
  app.use(cors());

  // 代理
  app.use('/', proxy({ target: host, changeOrigin: true }));
  // options 预检请求处理
  app.options('/', function (req, res) {
    res.status(204).send('ok');
  });

  app.listen(3000);
}

var CMD = {
  add,
  config,
  help,
  version: V,
  start: startProxy,
};

function getcmd (argv) {
  let res;
  const cmds = argv._;

  Object.keys(argv).some(function (key) {
    if (CONFIG.CLI_PARAMS[key]) {
      res = CONFIG.CLI_PARAMS[key];
      return true;
    }
    return false;
  });
  if (!res) {
    cmds.some((key) => {
      if (CONFIG.CLI_PARAMS[key]) {
        res = CONFIG.CLI_PARAMS[key];
        return true;
      }
      return false;
    });
  }

  if (!res && getHost(argv)) {
    res = 'start';
  }

  return res;
}

// exec


const argv = parseArgs(process.argv.slice(2));
// console.log(argv);

let cmd = getcmd(argv);

// console.log(cmd);

if (!CMD[cmd]) {
  cmd = CONFIG.DEFAULT_CLI;
}

CMD[cmd](argv);
